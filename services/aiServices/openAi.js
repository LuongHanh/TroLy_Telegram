// services/aiServices/openAi.js
import axios from 'axios';
import dotenv from 'dotenv';
dotenv.config();

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// Th·ª© t·ª± ∆∞u ti√™n model
const MODELS = [
  'openai/gpt-3.5-turbo',                 // ch√≠nh
  'mistralai/mixtral-8x7b-instruct',       // fallback 1
  'meta-llama/llama-3-8b-instruct'         // fallback 2
];

const RULES = `
B·∫°n l√† tr·ª£ l√Ω AI ti·∫øng Vi·ªát. 
Ph√¢n t√≠ch c√¢u l·ªánh th√†nh JSON v·ªõi intent ‚àà {add, getu, update, finde}

Quy t·∫Øc:
- Gi·ªØ nguy√™n ch√≠nh t·∫£ cho title, description, keyword.
- N·∫øu thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc, li·ªát k√™ v√†o "missing".
- Ch·ªâ tr·∫£ JSON h·ª£p l·ªá, kh√¥ng gi·∫£i th√≠ch.
ƒê·ªëi v·ªõi intent = add, getu, update:
- title ƒë∆∞·ª£c ph√¢n t√≠ch c√¥ ƒë·ªçng, ch·ªâ ch·ª©a ti√™u ƒë·ªÅ, kh√¥ng ch·ª©a th·ªùi gian hay m√¥ t·∫£
- deadline chuy·ªÉn sang datetime yyyy/mm/dd hh:mm:ss
- description l√† nguy√™n vƒÉn c√¢u ng∆∞·ªùi d√πng
- C√≥ intent nh∆∞ng kh√¥ng c√≥ n·ªôi dung v·∫´n tr·∫£ v·ªÅ json r·ªóng v·ªõi intent ƒë√≥
- intent = /update tr·∫£ v·ªÅ id ch·ª©a id, c√≤n l·∫°i l√†m nh∆∞ b√¨nh th∆∞·ªùng
- priority: s·ªë t·ª´ 1 ƒë·∫øn 5:
1 = vi·ªác √≠t quan tr·ªçng (xem phim, ch∆°i game,‚Ä¶ v√† c√°c c√¥ng vi·ªác t∆∞∆°ng t·ª±)
2 = vi·ªác kh√° quan tr·ªçng (li√™n hoan, t·∫≠p th·ªÉ d·ª•c, chi ti√™u, sinh ho·∫°t, ho·∫°t ƒë·ªông ngo·∫°i kho√°, v√† c√°c c√¥ng vi·ªác t∆∞∆°ng t·ª±)
3 = vi·ªác quan tr·ªçng (ƒÉn, h·ªçc, ng·ªß)
4 = vi·ªác r·∫•t quan tr·ªçng ng·∫Øn h·∫°n (thi c·ª≠, ƒë√≥ng ti·ªÅn, v√† c√°c c√¥ng vi·ªác t∆∞∆°ng t·ª±)
5 = vi·ªác r·∫•t quan tr·ªçng d√†i h·∫°n (>=1 nƒÉm: nghi√™n c·ª©u khoa h·ªçc, nckh, kh·ªüi nghi·ªáp, v√† c√°c c√¥ng vi·ªác t∆∞∆°ng t·ª±)
ƒê·ªëi v·ªõi intent = finde:
- intent = /finde , tr·∫£ v·ªÅ type l√† 1 trong {·∫£nh,h√¨nh,pdf,word,excel,powerpoint,video,√¢m thanh,c++,c,java,python,javascript,html,css,json,packet tracer,th∆∞ vi·ªán,ch∆∞∆°ng tr√¨nh,disk image,n√©n}

ƒê·ªãnh d·∫°ng JSON:
{
  "intent": "",
  "arguments": {
    "id": "",
    "title": "",
    "description": "",
    "deadline": "",
    "priority": null,
    "type": "",
  },
  "missing": [],
  "confirm": false
}
`;

async function callModel(model, message, forcedIntent) {
  const userPrompt = forcedIntent
    ? `Intent √©p bu·ªôc: ${forcedIntent}\nPh√¢n t√≠ch tham s·ªë cho intent n√†y.\nC√¢u l·ªánh: "${message}"`
    : `C√¢u l·ªánh: "${message}"`;

  const res = await axios.post(
    'https://openrouter.ai/api/v1/chat/completions',
    {
      model,
      messages: [
        { role: 'system', content: RULES },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.2
    },
    {
      headers: {
        Authorization: `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    }
  );

  const content = res.data.choices[0].message.content.trim();
  const jsonMatch = content.match(/\{[\s\S]*\}/);
  if (!jsonMatch) throw new Error('AI tr·∫£ v·ªÅ kh√¥ng ch·ª©a JSON h·ª£p l·ªá');

  return JSON.parse(jsonMatch[0]);
}

export const analyzeMessage = async (message, forcedIntent = null) => {
  let lastError = null;

  for (const model of MODELS) {
    try {
      console.log(`üîπ G·ªçi model: ${model}`);
      return await callModel(model, message, forcedIntent);
    } catch (err) {
      lastError = err;

      // N·∫øu l·ªói 402 ho·∫∑c 429 ‚Üí th·ª≠ model ti·∫øp theo
      const status = err?.response?.status;
      if (status === 402 || status === 429 || !status) {
        console.warn(`‚ö†Ô∏è Model ${model} l·ªói (${status}), th·ª≠ fallback...`);
        continue;
      } else {
        break; // l·ªói kh√°c th√¨ d·ª´ng lu√¥n
      }
    }
  }

  console.error('‚ùå L·ªói AI cu·ªëi c√πng:', lastError?.response?.data || lastError?.message);
  throw new Error('T·∫•t c·∫£ model ƒë·ªÅu l·ªói, kh√¥ng th·ªÉ ph√¢n t√≠ch.');
};
