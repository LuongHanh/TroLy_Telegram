// telegram/bot.js
import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import path from 'path';
import 'dotenv/config';

import { handleUserInput } from '../logic/intentRouter.js';
import { readJSON } from '../services/fileService.js';
import { escapeMarkdown } from '../utils/escapeMarkdown.js';

const bot = new Telegraf(process.env.BOT_TOKEN);
let isInited = false; // tr√°nh ƒëƒÉng k√Ω nhi·ªÅu l·∫ßn
let viewProgress = 0; // ch·ªâ c√≥ 1 user n√™n d√πng bi·∫øn global
const CACHE_DIR    = './cache';
const RESULT_FILE  = path.join(CACHE_DIR, 'result.json');
let isSendingResults = false;

/* ======================== Helpers ======================== */
function formatTaskList(title, tasks) {
  const icons = {
    'C·∫ßn ch√∫ √Ω': 'üö®',
    'C·∫ßn l√†m ngay': 'üî¥',
    'Quan tr·ªçng': 'üü†',
    'Kh√° quan tr·ªçng': 'üü¢',
    '√çt quan tr·ªçng': '‚ö™'
  };

  return [
    `_ __${title}__ _`,
    ...tasks.map((t, i) => {
      const prioIcon = icons[t.PriorityLabel] || '‚ö™';
      const deadline = t.DeadlineFormatted
        ? `üóì ${escapeMarkdown(t.DeadlineFormatted)}`
        : '‚è≥ Kh√¥ng c√≥';
      return (`${i + 1} ${escapeMarkdown('. ')} ${prioIcon} *${escapeMarkdown(t.Title)}*\n   ${deadline} ${escapeMarkdown(' --- ')} *${escapeMarkdown(t.PriorityLabel)}*`);
    })
  ].join('\n\n');
}

async function sendFileResults(ctx) {
  if (isSendingResults) return; // ch·ªëng double
  isSendingResults = true;
  let files = [];
  try {
    files = await readJSON(RESULT_FILE);
  } catch {
    isSendingResults = false;
    return ctx.reply('‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ result.json');
  }

  if (!Array.isArray(files) || !files.length) {
    isSendingResults = false;
    return ctx.reply('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file n√†o.');
  }

  const start = viewProgress;
  const end = start + 8;
  const keyboard = [];

  if (start >= files.length) {
    isSendingResults = false;
    return ctx.reply('üìå H·∫øt r·ªìi!');
  }

  for (const f of files.slice(start, end)) {
    if (f.type === 'folder' || !f.id) continue;
    keyboard.push([
      { text: `${f.name}`, url: `https://drive.google.com/file/d/${f.id}/view?usp=sharing` }
    ]);
  }

  viewProgress = end; // c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô

  if (end < files.length) {
    keyboard.push([{ text: '‚ñ∂Ô∏è Xem th√™m', callback_data: 'more' }]);
  }

  await ctx.reply('üìÇ K·∫øt qu·∫£ t√¨m ki·∫øm:', {
    reply_markup: { inline_keyboard: keyboard },
    disable_web_page_preview: true
  });
  isSendingResults = false;
}

export function launchBot() {
  if (isInited) return;
  isInited = true;

  // ==== Command: /start ====
  bot.start((ctx) => {
    ctx.reply('üëã Ch√†o m·ª´ng ƒë·∫øn v·ªõi Tr·ª£ l√Ω c√° nh√¢n!\nH√£y nh·∫≠p y√™u c·∫ßu ho·∫∑c d√πng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.');
  });

  // ==== Command: /help ====
  bot.help((ctx) => {
    ctx.reply(`üìñ H∆∞·ªõng d·∫´n:
    /ping - ki·ªÉm tra bot ho·∫°t ƒë·ªông
    /w - L·∫•y link web
    /today - l·∫•y l·ªãch h√¥m nay
    /getd <dd-mm-yyyy> - l·∫•y l·ªãch ng√†y b·∫•t k·ª≥
    /getw <dd-mm-yyyy> - l·∫•y l·ªãch tu·∫ßn b·∫•t k·ª≥
    /getn <n> - l·∫•y l·ªãch n ng√†y g·∫ßn nh·∫•t
    /add <title-deadline-description> - th√™m l·ªãch
    /getu <title-deadline> - ch·ªçn l·ªãch c·∫≠p nh·∫≠t
    /update <title-deadline-description> - c·∫≠p nh·∫≠t
    /findk <t·ª´ kh√≥a> - t√¨m file theo t·ª´ kho√° <b√°o c√°o>
    /findt <time> - t√¨m file theo kho·∫£ng th·ªùi gian <m·ªõi nh·∫•t>
    /findd <description> - t√¨m file theo m√¥ t·∫£
    /findp <name> - t√¨m file theo th∆∞ m·ª•c cha
    /finde <type> - t√¨m file theo lo·∫°i file
`);
  });

  // ==== List c√°c l·ªánh slash ====
  const cmdList = [
    'ping', 'w',
    'today', 'getd', 'getw', 'getn',
    'add', 'getu', 'update',
    'findk', 'findt', 'findd', 'findp', 'finde'
  ];
  const cmdRegex = new RegExp(`\\/(${cmdList.join('|')})(?:\\s+([^/]+))?`, 'gi');

  // ==== Listener ch√≠nh ====
  bot.on(message('text'), async (ctx) => {
    const text = ctx.message.text.trim();
    let matches;
    let commandsFound = [];
    try {
      while ((matches = cmdRegex.exec(text)) !== null) {
        const command = matches[1];
        const argsText = matches[2]?.trim() || '';
        commandsFound.push({ command, argsText });
      }
      
      if (commandsFound.length === 0) { // Kh√¥ng ph·∫£i slash command ‚Üí g·ª≠i sang AI
        const reply = await handleUserInput(text, {
          chatId: ctx.chat.id,
          userId: ctx.from.id
        });
        if (!reply) return ctx.reply('ü§ñ Ch∆∞a ph√°t tri·ªÉn thu·∫ßn NLP');
      }

      for (let i = 0; i < commandsFound.length; i++) {
        const { command, argsText } = commandsFound[i];
        const findFile = command.toLowerCase().includes('find') || null; //l·ªçc ch·ª©c nƒÉng t√¨m file
        try {
          const reply = await handleUserInput(
            `/${command} ${argsText}`.trim(), //truy·ªÅn nguy√™n vƒÉn t·ª´ng slash cho AI
            {
              chatId: ctx.chat.id,
              userId: ctx.from.id,
              intent: command,
              args: { raw: argsText },
              findFile
            }
          );

          if (findFile) {   //d√πng cho file
            if (Array.isArray(reply)) {
              viewProgress = 0; 
              await sendFileResults(ctx);
              return;
            }
          }
          else {              
            if(reply[0] === 0){
              const webLink = process.env.WEB_LINK; // l·∫•y link t·ª´ .env
              await ctx.reply(`Link web: ${webLink}`, {
                reply_markup: {
                  inline_keyboard: [ { text: "üîó M·ªü web", url: webLink } ]
                },
                disable_web_page_preview: true
              });
              isSendingResults = false;
            }
            else if(reply[0] === 1){
              ctx.reply(escapeMarkdown(reply[1]), { parse_mode: 'MarkdownV2' });
            }
            else {
              ctx.reply(formatTaskList(reply[1], reply[2]), { parse_mode: 'MarkdownV2' }); // d√πng cho tasks
            }
            return;
          }
        } catch (err) {
          console.error(`L·ªói khi x·ª≠ l√Ω /${command}:`, err);
        }
      }
      return ctx.reply('Vui l√≤ng nh·∫≠p l·∫°i!');
    } catch (err) {
      console.error('L·ªói bot.on text handler:', err);
      ctx.reply('‚ö†Ô∏è C√≥ l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Th·ª≠ l·∫°i sau.');
    }
  });

  bot.on('callback_query', async (ctx) => {
    if (ctx.callbackQuery.data === 'more') {
      await sendFileResults(ctx);
      await ctx.answerCbQuery();
    }
  });

  // ==== Ch·∫°y bot ====
  bot.launch({ dropPendingUpdates: true });
  console.log('üöÄ Telegram Bot ƒë√£ s·∫µn s√†ng');

  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}
export default bot;